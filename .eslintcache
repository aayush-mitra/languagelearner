[{"C:\\Users\\rini_\\Desktop\\Stuff\\Coding Stuff\\LanguageLearner\\client\\src\\index.js":"1","C:\\Users\\rini_\\Desktop\\Stuff\\Coding Stuff\\LanguageLearner\\client\\src\\App.js":"2","C:\\Users\\rini_\\Desktop\\Stuff\\Coding Stuff\\LanguageLearner\\client\\src\\reportWebVitals.js":"3","C:\\Users\\rini_\\Desktop\\Stuff\\Coding Stuff\\LanguageLearner\\client\\src\\storage.js":"4","C:\\Users\\rini_\\Desktop\\Stuff\\Coding Stuff\\LanguageLearner\\client\\src\\utils\\storage.js":"5","C:\\Users\\rini_\\Desktop\\Stuff\\Coding Stuff\\LanguageLearner\\client\\src\\components\\Home.js":"6","C:\\Users\\rini_\\Desktop\\Stuff\\Coding Stuff\\LanguageLearner\\client\\src\\components\\Auth.js":"7","C:\\Users\\rini_\\Desktop\\Stuff\\Coding Stuff\\LanguageLearner\\client\\src\\utils\\authfuncs.js":"8","C:\\Users\\rini_\\Desktop\\Stuff\\Coding Stuff\\LanguageLearner\\client\\src\\components\\List.js":"9","C:\\Users\\rini_\\Desktop\\Stuff\\Coding Stuff\\LanguageLearner\\client\\src\\components\\Flashcards.js":"10","C:\\Users\\rini_\\Desktop\\Stuff\\Coding Stuff\\LanguageLearner\\client\\src\\components\\Quiz.js":"11"},{"size":689,"mtime":1609315212246,"results":"12","hashOfConfig":"13"},{"size":2807,"mtime":1609467042478,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":499162500000,"results":"15","hashOfConfig":"13"},{"size":723,"mtime":1609465751728,"results":"16","hashOfConfig":"13"},{"size":483,"mtime":1609315814840,"results":"17","hashOfConfig":"13"},{"size":4242,"mtime":1609465440160,"results":"18","hashOfConfig":"13"},{"size":4688,"mtime":1609359351177,"results":"19","hashOfConfig":"13"},{"size":716,"mtime":1609356607391,"results":"20","hashOfConfig":"13"},{"size":9915,"mtime":1609465419105,"results":"21","hashOfConfig":"13"},{"size":2132,"mtime":1609401255205,"results":"22","hashOfConfig":"13"},{"size":5656,"mtime":1609465598521,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"10mldxw",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},"C:\\Users\\rini_\\Desktop\\Stuff\\Coding Stuff\\LanguageLearner\\client\\src\\index.js",[],["50","51"],"C:\\Users\\rini_\\Desktop\\Stuff\\Coding Stuff\\LanguageLearner\\client\\src\\App.js",[],"C:\\Users\\rini_\\Desktop\\Stuff\\Coding Stuff\\LanguageLearner\\client\\src\\reportWebVitals.js",[],"C:\\Users\\rini_\\Desktop\\Stuff\\Coding Stuff\\LanguageLearner\\client\\src\\storage.js",[],"C:\\Users\\rini_\\Desktop\\Stuff\\Coding Stuff\\LanguageLearner\\client\\src\\utils\\storage.js",[],"C:\\Users\\rini_\\Desktop\\Stuff\\Coding Stuff\\LanguageLearner\\client\\src\\components\\Home.js",["52"],"import React, { Component } from 'react'\r\n\r\nimport {Link} from 'react-router-dom'\r\nimport {MyContext} from '../storage'\r\nimport { getFromStorage } from '../utils/storage';\r\n\r\nexport class Home extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      list: '',\r\n      new: false\r\n    };\r\n\r\n    this.onChange = this.onChange.bind(this);\r\n    this.onNew = this.onNew.bind(this);\r\n    this.create = this.create.bind(this);\r\n    this.logout = this.logout.bind(this);\r\n  }\r\n\r\n  logout(e) {\r\n    e.preventDefault();\r\n    const obj = getFromStorage('LanguageLearner');\r\n\r\n    if (obj && obj.token) {\r\n      fetch(this.context.state.proxy + 'users/logout')\r\n        .then(res => res.json())\r\n        .then(json => {\r\n          if (json.success) {\r\n            this.props.setParentToken('');\r\n            this.context.changeToken('');\r\n            this.context.setUserData({});\r\n          } else {\r\n            //console.log(json.message);\r\n          }\r\n        })\r\n    } else {\r\n      //console.log('err');\r\n    }\r\n  }\r\n\r\n  onChange(e) {\r\n    this.setState({[e.target.name]: e.target.value});\r\n  }\r\n\r\n  onNew(e) {\r\n    e.preventDefault();\r\n    this.setState({\r\n      new: true\r\n    });\r\n  }\r\n\r\n  create(e) {\r\n    e.preventDefault();\r\n    const stuff = {\r\n      name: this.state.list,\r\n      userid: this.context.state.userData._id\r\n    };\r\n    //console.log(stuff)\r\n    fetch(this.context.state.proxy+'lists/create', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': \"application/json\",\r\n        'Access-Control-Allow-Origin': '*'\r\n      },\r\n      body: JSON.stringify(stuff)\r\n    }).then(res => res.json())\r\n      .then(json => {\r\n        const {\r\n          email,\r\n          name,\r\n          lists,\r\n          _id\r\n        } = json.user\r\n        this.context.setUserData({\r\n          email,\r\n          name,\r\n          lists,\r\n          _id\r\n        });     \r\n        this.setState({\r\n          list: '',\r\n          new: false\r\n        });\r\n        \r\n      })\r\n  }\r\n\r\n  render() {\r\n    const the_list = this.context.state.userData.lists.map((elem, i) => {\r\n      return (\r\n      <Link key={i} className=\"link\" to={'/list/'+elem._id}>\r\n        <li>{elem.name}</li>\r\n      </Link>\r\n      )\r\n    });\r\n    \r\n\r\n    //console.log(the_list)\r\n\r\n    return (\r\n      <div className=\"body\">\r\n        <div className=\"navbar\">\r\n          <div className=\"container flex\">\r\n            <h1 className=\"logo\">Language Learner</h1>\r\n            <nav>\r\n              <ul>\r\n                <li>\r\n                  <Link className=\"link\" to=\"/\">Home</Link>\r\n                </li>\r\n                <li>\r\n                  <a href=\"#\" className=\"link\" onClick={this.logout}>Logout</a>\r\n                </li>\r\n              </ul>\r\n            </nav>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"main\">\r\n          <div className=\"flex stuff\">\r\n            <div className=\"listnav\">\r\n              <h2>My Lists</h2>\r\n              <nav>\r\n                <ul>\r\n                  {the_list}\r\n                  {this.state.new ?\r\n                    <li>\r\n                      <input type=\"text\" onChange={this.onChange} value={this.state.list} className=\"editinput\" name=\"list\" />\r\n                    </li> : null\r\n                  }\r\n                  {!this.state.new ?\r\n                    <li>\r\n                      <button onClick={this.onNew} className=\"new\">New +</button>\r\n                    </li> :\r\n                    <li>\r\n                      <button onClick={this.create} className=\"new\">Create</button>\r\n                    </li>\r\n                  }\r\n                </ul>\r\n              </nav>\r\n            </div>\r\n            <div className=\"showcase\">\r\n              <div className=\"display\">\r\n                <p>Select the list that you would like to view.</p>\r\n              </div>\r\n            </div>\r\n            <div className=\"actionnav\">\r\n              <h2>View</h2>\r\n              <nav>\r\n                <ul>\r\n                  <li>Select a list<br />to select a view.</li>\r\n                  \r\n                </ul>\r\n              </nav>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Home\r\nHome.contextType = MyContext;\r\n","C:\\Users\\rini_\\Desktop\\Stuff\\Coding Stuff\\LanguageLearner\\client\\src\\components\\Auth.js",[],"C:\\Users\\rini_\\Desktop\\Stuff\\Coding Stuff\\LanguageLearner\\client\\src\\utils\\authfuncs.js",[],"C:\\Users\\rini_\\Desktop\\Stuff\\Coding Stuff\\LanguageLearner\\client\\src\\components\\List.js",["53","54"],"import React, { Component } from 'react'\r\n\r\nimport { Link, Redirect } from 'react-router-dom'\r\nimport { MyContext } from '../storage'\r\nimport { getFromStorage } from '../utils/storage'\r\nimport { Flashcards } from './Flashcards';\r\nimport { Quiz } from './Quiz';\r\n\r\nexport class List extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isLoading: true,\r\n      view: 'flashcards',\r\n      listid: this.props.match.params.id,\r\n      user: this.props.userData,\r\n      list: {},\r\n      new: false,\r\n      create1: '',\r\n      create2: '',\r\n      redirect: false,\r\n      save: false\r\n    };\r\n    this.logout = this.logout.bind(this);\r\n    this.changeView = this.changeView.bind(this);\r\n    this.editOnChange = this.editOnChange.bind(this);\r\n    this.onSave = this.onSave.bind(this);\r\n    this.toggleCreate = this.toggleCreate.bind(this);\r\n    this.onCreate = this.onCreate.bind(this);\r\n    this.createOnChange = this.createOnChange.bind(this);\r\n    this.onDelete = this.onDelete.bind(this);\r\n    this.deleteList = this.deleteList.bind(this);\r\n  }\r\n\r\n  deleteList(e) {\r\n    e.preventDefault();\r\n    let final = {\r\n      userid: this.state.user._id,\r\n      listid: this.state.listid\r\n    }\r\n    e.target.innerHTML = 'Deleting...'\r\n    fetch(`${this.context.state.proxy}lists/delete`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Access-Control-Allow-Origin': '*'\r\n      },\r\n      body: JSON.stringify(final)\r\n    }).then(res => res.json())\r\n      .then(json => {\r\n        if (json.success) {\r\n          //console.log(json.user);\r\n          \r\n          this.context.setUserData(json.user);\r\n\r\n        }\r\n      })\r\n  }\r\n\r\n  onDelete(e) {\r\n    e.preventDefault();\r\n    let data = this.state.list.cards[parseInt(e.target.name)];\r\n    //console.log(data)\r\n    let final = {\r\n      cardid: data._id,\r\n      listid: this.state.listid\r\n    }\r\n    e.target.innerHTML = 'Deleting...'\r\n    fetch(`${this.context.state.proxy}lists/delete-card`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Access-Control-Allow-Origin': '*'\r\n      },\r\n      body: JSON.stringify(final)\r\n    }).then(res => res.json())\r\n      .then(json => {\r\n        if (json.success) {\r\n          let contextstuff = this.context.state.userData;\r\n          contextstuff.lists = json.lists;\r\n          this.context.setUserData(contextstuff);\r\n\r\n        }\r\n      })\r\n  }\r\n\r\n  createOnChange(e) {\r\n    e.preventDefault();\r\n    this.setState({[e.target.name]: e.target.value});\r\n  }\r\n\r\n  onCreate(e) {\r\n    e.preventDefault();\r\n    let final = {\r\n      side1: this.state.create1,\r\n      side2: this.state.create2,\r\n      userid: this.state.user._id,\r\n      listid: this.state.listid\r\n    }\r\n    e.target.innerHTML = 'Creating...'\r\n    fetch(`${this.context.state.proxy}lists/create-card`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Access-Control-Allow-Origin': '*'\r\n      },\r\n      body: JSON.stringify(final)\r\n    }).then(res => res.json())\r\n      .then(json => {\r\n        if (json.success) {\r\n          let contextstuff = this.context.state.userData;\r\n          contextstuff.lists = json.lists;\r\n          \r\n          this.context.setUserData(contextstuff);\r\n\r\n        }\r\n      })\r\n  }\r\n\r\n  toggleCreate(e) {\r\n    e.preventDefault();\r\n    this.setState({ new: true });\r\n  }\r\n\r\n  changeView(e) {\r\n    //console.log(e.target.innerHTML.toLowerCase());\r\n    this.setState({\r\n      view: e.target.innerHTML.toLowerCase()\r\n    });\r\n  }\r\n\r\n  editOnChange(e) {\r\n    let prev = this.state.list\r\n    prev.cards[parseInt(e.target.name.split(\",\")[1])][e.target.name.split(\",\")[0]] = e.target.value;\r\n    this.setState({\r\n      list: prev,\r\n      save: true\r\n    });\r\n  }\r\n\r\n  onSave(e) {\r\n    e.preventDefault();\r\n    //console.log(e)\r\n    let final = {\r\n      the_list: this.state.list,\r\n      listid: this.state.listid\r\n    }\r\n    e.target.innerHTML = 'Saving...'\r\n    fetch(`${this.context.state.proxy}lists/edit`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Access-Control-Allow-Origin': '*'\r\n      },\r\n      body: JSON.stringify(final)\r\n    }).then(res => res.json())\r\n      .then(json => {\r\n        if (json.success) {\r\n          let contextstuff = this.context.state.userData;\r\n          contextstuff.lists = json.lists;\r\n          this.context.setUserData(contextstuff);\r\n\r\n        }\r\n      })\r\n  }\r\n\r\n  logout(e) {\r\n    e.preventDefault();\r\n    const obj = getFromStorage('LanguageLearner');\r\n\r\n    if (obj && obj.token) {\r\n      fetch(this.context.state.proxy + 'users/logout')\r\n        .then(res => res.json())\r\n        .then(json => {\r\n          if (json.success) {\r\n            this.props.setParentToken('');\r\n            this.context.changeToken('');\r\n            this.context.setUserData({});\r\n          } else {\r\n            //console.log(json.message);\r\n          }\r\n        })\r\n    } else {\r\n      //console.log('err');\r\n    }\r\n  }\r\n\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n\r\n    if (nextProps.match.params.id !== prevState.listid) {\r\n\r\n      return ({ listid: nextProps.match.params.id })\r\n    } else {\r\n      return null\r\n    }\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n    let main;\r\n    main = this.state.user.lists;\r\n    if (this.state.user.lists.map(e => e._id).includes(this.state.listid)) {\r\n      main.forEach((elem) => {\r\n        if (elem._id === this.state.listid) {\r\n          this.setState({\r\n            list: elem,\r\n            isLoading: false\r\n          });\r\n        }\r\n      });\r\n    } else {\r\n      this.setState({\r\n        redirect: true,\r\n        isLoading: false\r\n      });\r\n    }\r\n  }\r\n  render() {\r\n    \r\n    if (this.state.isLoading) {\r\n      \r\n      return (<p>Loading...</p>)\r\n    }\r\n\r\n    if (this.state.redirect === true) {\r\n      return (<Redirect to=\"/\" />)\r\n    }\r\n    //console.log(this.state.list.cards);\r\n    let newmenu = (\r\n      <div style={{ border: '1px solid var(--primary-color)' }} className=\"cardedit\">\r\n        <p>New</p>\r\n        <hr />\r\n        <label htmlFor=\"side1\">Side 1: </label>\r\n        <input type=\"text\" onChange={this.createOnChange} value={this.state.create1} className=\"editinput\" name='create1' />\r\n        <label htmlFor=\"side2\">Side 2: </label>\r\n        <input type=\"text\" onChange={this.createOnChange} value={this.state.create2} className=\"editinput\" name='create2' />\r\n        <button onClick={this.onCreate}>Create</button>\r\n      </div>\r\n    )\r\n\r\n    let edits = this.state.list.cards.map((elem, i) => {\r\n      return (\r\n        <div className=\"cardedit\" key={i}>\r\n          \r\n          <label htmlFor=\"side1\">Side 1: </label>\r\n          <input type=\"text\" onChange={this.editOnChange} value={this.state.list.cards[i].side1} className=\"editinput\" name={['side1', i]} />\r\n          <label htmlFor=\"side2\">Side 2: </label>\r\n          <input type=\"text\" onChange={this.editOnChange} value={this.state.list.cards[i].side2} className=\"editinput\" name={['side2', i]} />       \r\n          <button style={{backgroundColor: 'rgb(199, 58, 58)'}} onClick={this.onDelete} name={i}>Delete Card</button>        \r\n        </div>\r\n      )\r\n    })\r\n\r\n    return (\r\n      <div className=\"body\">\r\n        <div className=\"navbar\">\r\n          <div className=\"container flex\">\r\n            <h1 className=\"logo\">Language Learner</h1>\r\n            <nav>\r\n              <ul>\r\n                <li>\r\n                  <Link className=\"link\" to=\"/\">Home</Link>\r\n                </li>\r\n                <li>\r\n                  <a href=\"\" className=\"link\" onClick={this.logout}>Logout</a>\r\n                </li>\r\n              </ul>\r\n            </nav>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"main\">\r\n          <div className=\"flex stuff\">\r\n            <div className=\"listnav\">\r\n              <h2>Selected List</h2>\r\n              <nav>\r\n                <ul>\r\n                  <a className=\"link\">\r\n                    <li id=\"selectedlist\">{this.state.list.name || 'Loading...'}</li>\r\n                  </a>\r\n\r\n                </ul>\r\n              </nav>\r\n            </div>\r\n            <div style={this.state.view === 'edit' ? { overflowY: 'scroll' } : {overflowY: 'hidden'}} className=\"showcase\">\r\n              <div style={this.state.view === 'edit' ? { display: 'flex' } : {}} className=\"edit\">\r\n                {this.state.save ? <button onClick={this.onSave} className=\"new\">Save Changes</button>: null }\r\n                {\r\n                  \r\n                  edits\r\n                }\r\n                {\r\n                  this.state.new ? newmenu : <button onClick={this.toggleCreate} className=\"new\">New Card</button>\r\n                }\r\n                <button onClick={this.deleteList} style={{ backgroundColor: 'rgb(199, 58, 58)' }} className=\"new\">Delete List</button>\r\n              </div>\r\n              {\r\n              this.state.list.cards.length !== 0 ?\r\n              (<React.Fragment>{this.state.view === 'flashcards' ? <Flashcards view={this.state.view} cards={this.state.list.cards}/>: null}\r\n              {this.state.view === 'quiz' ? <Quiz view={this.state.view} cards={this.state.list.cards}/>: null}</React.Fragment>) : null\r\n              }\r\n            </div>\r\n            <div className=\"actionnav\">\r\n              <h2>View</h2>\r\n              <nav>\r\n                <ul>\r\n                  <li onClick={this.changeView} className={this.state.view === 'flashcards' ? 'active' : ''}>Flashcards</li>\r\n                  <li onClick={this.changeView} className={this.state.view === 'quiz' ? 'active' : ''}>Quiz</li>\r\n                  <li onClick={this.changeView} className={this.state.view === 'edit' ? 'active' : ''}>Edit</li>\r\n                </ul>\r\n              </nav>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default List\r\nList.contextType = MyContext;","C:\\Users\\rini_\\Desktop\\Stuff\\Coding Stuff\\LanguageLearner\\client\\src\\components\\Flashcards.js",[],"C:\\Users\\rini_\\Desktop\\Stuff\\Coding Stuff\\LanguageLearner\\client\\src\\components\\Quiz.js",["55"],"import React, { Component } from 'react'\r\nimport { MyContext } from '../storage';\r\n\r\nexport class Quiz extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      type: 'choice',\r\n      ask: 'side2',\r\n      cards: this.props.cards,\r\n      questions: [],\r\n      questionIndex: 0,\r\n      isLoading: true,\r\n      answer: ''\r\n    };\r\n\r\n    this.onTypeChange = this.onTypeChange.bind(this);\r\n    this.onAskChange = this.onAskChange.bind(this);\r\n    this.getRandomInt = this.getRandomInt.bind(this);\r\n    this.answer = this.answer.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(`${this.context.state.proxy2}users/test/`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({cards: this.state.cards})\r\n    }).then(res => res.json())\r\n      .then(json => {\r\n        //console.log(json.questions)\r\n        this.setState({questions: json.questions, isLoading: false, questionIndex: this.getRandomInt(0, json.questions.choice.length)});\r\n      })\r\n  }\r\n\r\n  answer(e) {\r\n    const {\r\n      type,\r\n      ask,\r\n      questionIndex,\r\n      answer,\r\n      questions\r\n    } = this.state\r\n    //console.log(e);\r\n    e.preventDefault();\r\n    if (type === 'choice') {\r\n        //console.log(questions.choice[questionIndex].side1.answer)\r\n      if (questions.choice[questionIndex][ask].correct === e.target.innerHTML) {\r\n        e.target.className += \" correct\"\r\n        setTimeout(() => {\r\n          e.target.className = \"choice\"\r\n          this.setState({\r\n          questionIndex: this.getRandomInt(0, questions.choice.length),\r\n          answer: ''\r\n          })\r\n        }, 1000)\r\n      } else {\r\n        e.target.className += \" incorrect\"\r\n        setTimeout(() => {\r\n          e.target.className = \"choice\"\r\n          this.setState({\r\n          questionIndex: this.getRandomInt(0, questions.choice.length),\r\n          answer: ''\r\n          })\r\n        }, 1000)\r\n      }\r\n    } else {\r\n      if (questions.choice[questionIndex][ask].correct === answer) {\r\n        let elem = e.target.parentElement.previousElementSibling.firstElementChild;\r\n        elem.className += \" correct\"\r\n        elem.innerHTML = \"Correct! \" + elem.innerHTML\r\n        setTimeout(() => {\r\n          elem.className = \"quiz\"\r\n          elem.innerHTML = elem.innerHTML.substring(9)\r\n          this.setState({\r\n          questionIndex: this.getRandomInt(0, questions.choice.length),\r\n          answer: ''\r\n          })\r\n        }, 2000)\r\n      } else {\r\n        let elem = e.target.parentElement.previousElementSibling.firstElementChild;\r\n        elem.className += \" incorrect\"\r\n        elem.innerHTML = \"Incorrect! \" + elem.innerHTML\r\n        setTimeout(() => {\r\n          elem.className = \"quiz\"\r\n          elem.innerHTML = elem.innerHTML.substring(11)\r\n          this.setState({\r\n          questionIndex: this.getRandomInt(0, questions.choice.length),\r\n          answer: ''\r\n          })\r\n        }, 2000)\r\n      }\r\n    }\r\n  }\r\n\r\n  getRandomInt(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\r\n  }\r\n\r\n  onAskChange(e) {\r\n    this.setState({[e.target.name]: e.target.value});\r\n  }\r\n\r\n  onTypeChange(e) {\r\n    this.setState({[e.target.name]: e.target.value});\r\n  }\r\n\r\n  render() {\r\n    if (this.state.isLoading) {\r\n      return (<p>Loading...</p>)\r\n    }\r\n    const {\r\n      choice,\r\n      typed\r\n    } = this.state.questions;\r\n    //console.log(choice);\r\n    return (\r\n      <div style={this.props.view === 'quiz' ? { display: 'block' } : {}} className=\"quiz\">\r\n        <center>\r\n          <label>Ask for:</label>\r\n          <select value={this.state.ask} onChange={this.onAskChange} name=\"ask\" id=\"type\">\r\n            <option value=\"side1\">Side 1</option>\r\n            <option value=\"side2\">Side 2</option>\r\n          </select>\r\n          <br />\r\n          <label>Response Type:</label>\r\n          <select value={this.state.type} onChange={this.onTypeChange} name=\"type\" id=\"type\">           \r\n            <option value=\"choice\">Multiple Choice</option>\r\n            <option value=\"typed\">Typed</option>\r\n          </select>\r\n        </center>\r\n        {this.state.type === 'choice' ?\r\n        (<div className=\"question\" id=\"multiple-choice\">\r\n          <h2 id=\"question-title\">\r\n            {this.state.ask === 'side1' \r\n            ? \r\n            choice[this.state.questionIndex].side1.question \r\n            : \r\n            choice[this.state.questionIndex].side2.question}\r\n          </h2>\r\n          <div className=\"choices\">\r\n            {choice[this.state.questionIndex][this.state.ask].answers.map((answer, i) => {\r\n              return <div key={i} onClick={this.answer} className=\"choice\">{answer}</div>\r\n            })}\r\n          </div>\r\n        </div>) :\r\n        (<div className=\"question\" id=\"typed\">\r\n          <h2 id=\"question-title\">\r\n            {this.state.ask === 'side1' \r\n            ? \r\n            typed[this.state.questionIndex].side1.question \r\n            : \r\n            typed[this.state.questionIndex].side2.question}\r\n          </h2>\r\n          <div className=\"reveal\"> \r\n            <h2 className=\"quiz\" id=\"reveal-text\"></h2>             \r\n          </div>\r\n          <form className=\"response\">\r\n            <input value={this.state.answer} onChange={(e) => this.setState({answer: e.target.value})} type=\"text\" id=\"answer\" name=\"answer\" />\r\n            <button onClick={this.answer}>Submit</button>\r\n          </form>\r\n        </div>)}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Quiz\r\nQuiz.contextType = MyContext;\r\n",{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":112,"column":19,"nodeType":"62","endLine":112,"endColumn":70},{"ruleId":"60","severity":1,"message":"61","line":265,"column":19,"nodeType":"62","endLine":265,"endColumn":69},{"ruleId":"60","severity":1,"message":"63","line":278,"column":19,"nodeType":"62","endLine":278,"endColumn":39},{"ruleId":"64","severity":1,"message":"65","line":159,"column":13,"nodeType":"62","endLine":159,"endColumn":51},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","no-global-assign","no-unsafe-negation"]